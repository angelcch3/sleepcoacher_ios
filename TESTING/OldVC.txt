//
//  ViewController.swift
//  oct21
//
//  Created by Nediyana Daskalova on 10/21/15.
//  Copyright Â© 2015 nediyana. All rights reserved.
//

import UIKit
import CoreMotion
import Foundation
import Alamofire
import SwiftyJSON
import AVFoundation



class OldViewController: UIViewController, AVAudioRecorderDelegate, AVAudioSessionDelegate {
    let motionManager: CMMotionManager = CMMotionManager()
    let accelData: CMAccelerometerData = CMAccelerometerData()
    
    let userID = UIDevice.currentDevice().identifierForVendor!.UUIDString
    var postsEndpoint: String = "http://sleep.cs.brown.edu:80"
    
    @IBOutlet var label: UILabel!
    @IBOutlet weak var timestamp: UILabel!
    
    var recordedAudio: RecordedAudio!
    var audioRecorder: AVAudioRecorder!
    var audioPlayer: AVAudioPlayer!
    var filePath: NSURL!
    
    var recordedDecibelArray = [Float]()
    var recordedDateTimeArray = [NSDate]()
    
    var timer = NSTimer()
    var timer_running = false
    var content = ""
    
    let dir: NSURL = NSFileManager.defaultManager().URLsForDirectory(NSSearchPathDirectory.CachesDirectory, inDomains: NSSearchPathDomainMask.UserDomainMask).last as NSURL!
    
    let fileName = "sample.csv"
    
    
    
    func sayHello()
    {
        motionManager.accelerometerUpdateInterval = 1//1 time per second
        
        let date = NSDate()
        let stamp = Int(floor(date.timeIntervalSince1970*1000))
        
        timestamp.text = "\(stamp)"
        
        // WRITE TO FILE //
        let string  = "\(stamp)"
        let data = string.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!
        let fileurl = dir.URLByAppendingPathComponent("logData.txt")
        
        if NSFileManager.defaultManager().fileExistsAtPath(fileurl.path!) {
            var err:NSError?
            do {
                let fileHandle = try NSFileHandle(forWritingToURL: fileurl)
                fileHandle.seekToEndOfFile()
                fileHandle.writeData(data)
                fileHandle.closeFile()
            } catch let error as NSError {
                err = error
                print("Can't open fileHandle \(err)", terminator: "")
            }
        }
        else {
            var err:NSError?
            do {
                try data.writeToURL(fileurl, options: .DataWritingAtomic)
            } catch let error as NSError {
                err = error
                print("Can't write \(err)", terminator: "")
            }
        }
        //END OF WRITE TO FILE///
        
        NSLog("\(fileurl)")
        NSLog("\(stamp)")
        
        var acceleration_xyz = 0.0;
        var acceleration_x = 0.0;
        var acceleration_y = 0.0;
        var acceleration_z = 0.0;
        
        timerUpdate(stamp);
        
        motionManager.startAccelerometerUpdatesToQueue(NSOperationQueue.mainQueue()) {
            [weak self] (data: CMAccelerometerData?, error: NSError?) in self!.label.text = String(format:"%.2f", data!.acceleration.x)
            
            acceleration_x =  data!.acceleration.x
            acceleration_y =  data!.acceleration.y
            acceleration_z =  data!.acceleration.x
            
            //            NSLog(String(format:"%.2f", acceleration_x));
            //            NSLog(String(format:"%.2f", acceleration_y));
            //            NSLog(String(format:"%.2f", acceleration_z));
            // this adds up the accelerations over all 3 axes, but if the phone us just staying stright vertically (with charging port pointing down, and screen pointing towards user while holding phone, then the y axis = -0.99, so this adds up to a high value again; maybe check that?
            acceleration_xyz = fabs(acceleration_x) + fabs(acceleration_y) + fabs(acceleration_z)
            //            NSLog("combined")
            NSLog("accelerometer data")
            NSLog(String(format:"%.2f", acceleration_xyz));
            
            self!.label.text = String(format:"%.2f", acceleration_xyz)
            let string1 = String(format: "%.2f\n", acceleration_xyz)
            
            //            var data1 = string1.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!
            
            if let dataFromString = string1.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false) {
                let json = JSON(data: dataFromString)
                NSLog(String(stringInterpolationSegment: json))
            }
            
            var data = ""
            var timestmp = ""
            data = string1 + ","
            timestmp = "\(stamp)" + ","
            var newPostStamp = ["Date": timestmp, "accelerometer": data, "User": self!.userID];
            var tempData = timestmp + data + "\(self!.userID)"
            var data1 = tempData.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!
            NSLog(string1)
            
            Alamofire.request(.POST, "http://sleep.cs.brown.edu:80" , parameters: newPostStamp).response { res in
                NSLog("IN POST REUQUEST 1")
                print(res)
            }
            let fileurl1 = self!.dir.URLByAppendingPathComponent("nov24.txt")
            
            if NSFileManager.defaultManager().fileExistsAtPath(fileurl1.path!) {
                var err:NSError?
                do {
                    let fileHandle = try NSFileHandle(forWritingToURL: fileurl1)
                    fileHandle.seekToEndOfFile()
                    NSLog("in write to FILE")
                    NSLog(tempData)
                    fileHandle.writeData(data1)
                    fileHandle.closeFile()
                } catch let error as NSError {
                    err = error
                    print("Can't open fileHandle \(err)", terminator: "")
                } catch {
                    fatalError()
                }
                
            } else {
                var err:NSError?
                do {
                    try data1.writeToURL(fileurl1, options: .DataWritingAtomic)
                } catch var error as NSError {
                    err = error
                    print("Can't write \(err)", terminator:"")
                } catch {
                    fatalError()
                }
            }
            
            //           Section below is meant to read from file, but is now giving an error that no such file exists. TODO.
            
            //            if NSFileManager.defaultManager().fileExistsAtPath(fileurl1.path!) {
            //                var err:NSError?
            //                do {
            //                    let fileHandle1 = try NSFileHandle(forReadingFromURL: fileurl1)
            //                    NSLog("in read")
            //                    var path = fileurl1.absoluteString
            //                    NSLog(path)
            //                    let text2 = try String(contentsOfFile: path, encoding: NSUTF8StringEncoding)
            //                    NSLog(text2)
            //                } catch let error as NSError {
            //                    print("Error: \(error)")
            //                }
            //            } else {
            //                var err:NSError?
            //                do {
            //                    try data1.writeToURL(fileurl1, options: .DataWritingAtomic)
            //                } catch var error as NSError {
            //                    err = error
            //                    print("Can't write \(err)", terminator:"")
            //                } catch {
            //                    fatalError()
            //                }
            //            }
            
        }
    }
    
    //    func recordAudio(){
    //        print("in record")
    //
    //        // !! to do
    //        // (1) save to local
    //        // (2) UPLOAD IT ONTO SERVER when/if internet connection
    //
    //        // specify where audio file will be saved
    //        let dirPath = NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)[0]
    //        // name file with date/time to be unique
    //
    //        let currentDateTime = NSDate()
    //        let formatter = NSDateFormatter()
    //        formatter.dateFormat = "ddMMyyyy-HHmmss"
    //        let recordingName = formatter.stringFromDate(currentDateTime) + ".wav"
    //        let pathArray = [dirPath, recordingName]
    //        let filePath = NSURL.fileURLWithPathComponents(pathArray)
    //        print(filePath)
    //
    //        // create a session
    //        let session = AVAudioSession.sharedInstance()
    //        do {
    //            try session.setCategory(AVAudioSessionCategoryPlayAndRecord)
    //        } catch _ {
    //        }
    //        // create a new audio recorder
    //        audioRecorder = try? AVAudioRecorder(URL: filePath!, settings: [:])
    //        audioRecorder.delegate = self
    //        audioRecorder.meteringEnabled = true
    //        audioRecorder.prepareToRecord()
    //        audioRecorder.record()
    //
    //        do {
    //         try AVAudioSession.sharedInstance().setActive(true)
    //        } catch {
    //            print(error)
    //        }
    //
    ////        timer = NSTimer.scheduledTimerWithTimeInterval(1, target: self, selector: "timerUpdate", userInfo: nil, repeats: true)
    //
    ////        print("recordedDecibelArray 1 \(recordedDecibelArray)")
    //    }
    
    
    
    // every time the NStimer fires, run this
    // timer for accelerometer updates
    func timerUpdate(dateString: Int){
        print("- - - - - - inside timerUpdate")
        audioRecorder.updateMeters()
        
        let numberOfChannels: Int = 2
        var power: Float = 0.0
        
        for (var i = 0; i < 2; i++){
            power += audioRecorder.averagePowerForChannel(i)
        }
        
        // average of the two channels
        power /= Float(numberOfChannels)
        
        // date stuff
        let currentDate = NSDate()
        let dateFormatter = NSDateFormatter()
        let theDateFormat = NSDateFormatterStyle.ShortStyle
        let theTimeFormat = NSDateFormatterStyle.MediumStyle
        dateFormatter.dateStyle = theDateFormat
        dateFormatter.timeStyle = theTimeFormat
        let date = NSDate()
        var paramString = ["Date": dateString, "decibelLevel": power, "User": self.userID];
        
        
        NSLog(String(format:"decibelLevel = %.2f", power));
        
        Alamofire.request(.POST, "http://sleep.cs.brown.edu:80" , parameters: paramString as! [String : AnyObject]).response { res in
            NSLog("IN POST REQUEST 1")
            print(res)
        }
        
        return
    }
    
    func stopRecording(){
        
        //        timer.invalidate()
        print("stopped recording")
        print("recordedDecibelArray 2 \(recordedDecibelArray)")
        print("recordedDateTimeArray 2 \(recordedDateTimeArray)")
        
        audioRecorder.stop()
        
        // wait for confirmation from server
        // post recordDecibelArray to server
        
        let audioSession = AVAudioSession.sharedInstance()
        
        do {
            try audioSession.setActive(false)
        } catch _ {
        }
    }
    
    func audioRecorderDidFinishRecording(recorder: AVAudioRecorder, successfully flag: Bool) {
        if (flag){
            // store in model
            recordedAudio = RecordedAudio()
            recordedAudio.filePathURL = recorder.url
            recordedAudio.title = recorder.url.lastPathComponent
            
            // segue once we've finished processing the audio
        } else{
            print("recording not successful")
        }
    }
    
    
    
    @IBAction func startButton(sender: AnyObject) {
        label.text = "updating"
        if timer_running == false {
            // create a timer
            timer = NSTimer.scheduledTimerWithTimeInterval(1.0, target: self, selector: Selector("sayHello"), userInfo: nil, repeats: true)
            timer_running = true
            //            recordAudio()
        }
    }
    
    @IBAction func stopButton(sender: AnyObject) {
        motionManager.stopAccelerometerUpdates()
        
        Alamofire.request(.GET, postsEndpoint).responseJSON {
            response in
            if response.result.isSuccess{
                NSLog("in GET REQUEST")
                let jsonDic = response.result.value as! NSDictionary
                let responseData = jsonDic["responseData"] as! NSDictionary
            }
        }
        
        let myPathList: NSArray = NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.CachesDirectory, NSSearchPathDomainMask.UserDomainMask, true)
        
        var myPath = myPathList[0] as! String
        myPath = myPath + "oct21.txt"
        
        var error:NSError?
        do {
            let content = try String(contentsOfFile: myPath, encoding: NSUTF8StringEncoding)
            print(content)
        } catch let error1 as NSError {
            error = error1
        }
        
        timer.invalidate()
        timer_running = false
        stopRecording()
        label.text = "stopped updating"
        
        // send data to server
        
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        label.text = "Press Start to start updating"
        // Do any additional setup after loading the view, typically from a nib.
        
        /////////////////
        // Audio Recorder stuff
        let dirPath = NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)[0]
        // name file with date/time to be unique
        
        let currentDateTime = NSDate()
        let formatter = NSDateFormatter()
        formatter.dateFormat = "ddMMyyyy-HHmmss"
        let recordingName = formatter.stringFromDate(currentDateTime) + ".wav"
        let pathArray = [dirPath, recordingName]
        let filePath = NSURL.fileURLWithPathComponents(pathArray)
        print(filePath)
        
        // create a session
        let session = AVAudioSession.sharedInstance()
        do {
            try session.setCategory(AVAudioSessionCategoryPlayAndRecord)
        } catch _ {
        }
        // create a new audio recorder
        audioRecorder = try? AVAudioRecorder(URL: filePath!, settings: [:])
        audioRecorder.delegate = self
        audioRecorder.meteringEnabled = true
        audioRecorder.prepareToRecord()
        audioRecorder.record()
        
        do {
            try AVAudioSession.sharedInstance().setActive(true)
        } catch {
            print(error)
        }
        // Observe audio session's interruption notification
        NSNotificationCenter.defaultCenter().addObserver(self,
            selector:"handleInterruption:",
            name:AVAudioSessionInterruptionNotification,
            object:session)
        
        NSNotificationCenter.defaultCenter().addObserver(self,
            selector:"handleInterruption2:",
            name:AVAudioSessionInterruptionNotification,
            object:self.audioRecorder)
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func handleInterruption2(notification: NSNotification){
        //        interruptionType: AVAudioSessionInterruptionType =
    }
    //
    //    func audioRecorderBeginInterruption(recorder: AVAudioRecorder) {
    //        audioRecorder.pause()
    //        print("\n")
    //        print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~ audio recorded paused!")
    //
    //        do {
    //            print("a1");
    //            try AVAudioSession.sharedInstance().setActive(false)
    //            print("could set 'active: false'")
    //        } catch {
    //            print("could NOT set 'active: false'")
    //            print(error)
    //        }
    //    }
    //
    //    func audioRecorderEndInterruption(recorder: AVAudioRecorder) {
    //
    //
    //
    //        do {
    //            print("a2");
    //            try AVAudioSession.sharedInstance().setActive(true)
    //            print("could set 'active: true'")
    //        } catch {
    //            print("could NOT set 'active: true'")
    //            print(error)
    //        }
    //        audioRecorder.record()
    //        print("\n")
    //        print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~ audio recorded resumed!")
    //    }
    
    
    
    ////////////
    // Handling Interruptions
    func handleInterruption(notification: NSNotification){
        // Audio Session is interrupted
        //
        print("|||||||||||||||||||||||||||||||||||||||||||||||| inside handleInterruption");
        
        if notification.name == AVAudioSessionInterruptionNotification && notification.userInfo != nil
        {
            var info = notification.userInfo!
            var intValue: UInt = 0
            
            (info[AVAudioSessionInterruptionTypeKey] as! NSValue).getValue(&intValue)
            
            if let type = AVAudioSessionInterruptionType(rawValue: intValue)
            {
                switch type
                {
                case .Began:
                    print("aaaaarrrrgggg you stole me")
                case .Ended:
                    print("i am back!")
                }
            }
        }
        //
        //        print("a");
        //
        //        // Pause recording
        //
        //
        //        audioRecorder.pause()
        ////        do {
        ////            print("a");
        ////            try AVAudioSession.sharedInstance().setActive(false)
        ////            print("could set 'active: false'")
        ////        } catch {
        ////            print("could NOT set 'active: false'")
        ////            print(error)
        ////        }
        //        print("audio recorded paused!")
        //
        //
        //        print("b");
        //
        //        let interruptionTypeAsObject = notification.userInfo![AVAudioSessionInterruptionTypeKey] as! NSNumber
        //
        //        let interruptionType = AVAudioSessionInterruptionType(rawValue: interruptionTypeAsObject.unsignedLongValue)
        //
        
        
        //        if let type = interruptionType{
        //            if type == .Ended{
        //                print("|||||||||||||||||||||||||||||||||||||||||||||||| interruption ended");
        //                print("c");
        //                // resume recording
        //
        //
        //
        //                print("audio recording resumed")
        //
        ////                do {
        ////                    print("a");
        ////                    try AVAudioSession.sharedInstance().setActive(true)
        ////                    print("could set 'active: true'")
        ////                } catch {
        ////                    print("could NOT set 'active: true'")
        ////                    print(error)
        ////                }
        //                audioRecorder.record()
        //                
        //                let numberOfChannels: Int = 2
        //                var power: Float = 0.0
        //                audioRecorder.updateMeters()
        //                for (var i = 0; i < 2; i++){
        //                    power += audioRecorder.averagePowerForChannel(i)
        //                }
        //                
        //                // average of the two channels
        //                power /= Float(numberOfChannels)
        //                
        //                print(String(format:"decibelLevel = %.2f", power));
        //                print("|||||||||||||||||||||||||||||||||||||||||||||||| done");
        //
        //            }
        //        }
    }
}

